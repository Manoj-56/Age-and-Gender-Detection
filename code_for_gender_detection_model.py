# -*- coding: utf-8 -*-
"""Code_For_Gender_Detection_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GYNlZ0u7tPhPx1TyV3eWHec_aBpQBGTq
"""

import os
import cv2 
import random as r
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten,Conv2D,MaxPool2D,Dropout,BatchNormalization

man = os.listdir('/content/drive/MyDrive/Gender/Boys')
woman = os.listdir('/content/drive/MyDrive/Gender/Girls')

# Reading and storing Cats and Dogs images

man_data = []
woman_data = []
for i in man:
  try:
    img1 =  cv2.imread(f'/content/drive/MyDrive/Gender/Boys/{i}')
    img2 = cv2.cvtColor(img1,cv2.COLOR_BGR2RGB)
    img = cv2.resize(cv2.cvtColor(img2,cv2.COLOR_RGB2GRAY),(256,256))
    man_data.append(img)
  except(Exception) as e:
    print(e)

for i in woman:
  try:
    img1 =  cv2.imread(f'/content/drive/MyDrive/Gender/Girls/{i}')
    img2 = cv2.cvtColor(img1,cv2.COLOR_BGR2RGB)
    img = cv2.resize(cv2.cvtColor(img2,cv2.COLOR_RGB2GRAY),(256,256))
    woman_data.append(img)
  except(Exception) as e:
    print(e)

# cat_data
# dog_data
len(man_data),len(woman_data)

# adding label value to images
man_lab = list(zip(man_data,[0 for x in range(len(man_data))]))
woman_lab = list(zip(woman_data,[1 for x in range(len(woman_data))]))

man_lab[1:5],woman_lab[1:5]

data = []
data.extend(man_lab)
data.extend(woman_lab)
r.shuffle(data) # shuffling the Data
len(data)
# data

train_fea = []
train_lab = []

valid_fea = []
valid_lab = []

test_fea = []
test_lab = []

for i in range(int(302*0.75)): # taking 75% Data for traing
  train_fea.append(data[i][0])
  train_lab.append(data[i][1])
for j in range(int(302*0.75),int(302*0.75)+int(302*0.05)): # taking 5% Data for validation
  valid_fea.append(data[j][0])
  valid_lab.append(data[j][1])
for k in range(int(302*0.75)+int(302*0.05),302): # taking 20% Data for Testing
  test_fea.append(data[k][0])
  test_lab.append(data[k][1])

print('train_fea :',len(train_fea))
print('train_lab :',len(train_lab))
print('valid_fea :',len(valid_fea))
print('valid_lab :',len(valid_lab))
print('test_fea :',len(test_fea))
print('test_lab :',len(test_lab))

# Coverting Into Numpy Arrays

train_fea = np.array(train_fea)
train_lab = np.array(train_lab)

valid_fea = np.array(valid_fea)
valid_lab = np.array(valid_lab)

test_fea = np.array(test_fea)
test_lab = np.array(test_lab)

train_fea.shape

# reshaping features
train_fea = train_fea.reshape((train_fea.shape[0],256,256,1))
valid_fea = valid_fea.reshape((valid_fea.shape[0],256,256,1))
test_fea = test_fea.reshape((test_fea.shape[0],256,256,1))

train_fea.shape

model = Sequential()
model.add(Conv2D(124,(3,3), input_shape = (256,256,1)))
model.add(MaxPool2D(2,2))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(MaxPool2D(2,2))
model.add(Dropout(0.2))
model.add(BatchNormalization())
model.add(Conv2D(124,(3,3),activation='relu'))
model.add(MaxPool2D(2,2))
model.add(Dropout(0.2))
model.add(BatchNormalization())
model.add(Flatten())
model.add(Dense(64,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(2,activation='softmax'))

#Compiling
model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

epoch = model.fit(train_fea,train_lab,epochs=100,batch_size = 120,validation_data=(valid_fea,valid_lab),verbose=1)

model.evaluate(test_fea,test_lab,verbose = 1)

history = epoch.history

#Plotting the Loss & Val_Loss , Accuracy & Val_Accuracy
plt.figure(figsize = (15,5)),
plt.subplot(1,2,1)
plt.plot(history['loss'], color = 'r')
plt.plot(history['val_loss'], color = 'g')
plt.title('Loss and Val_Loss', size = 15,color = 'orange')
plt.legend(['Loss','Val_Loss']) 

plt.subplot(1,2,2)
plt.plot(history['accuracy'], color = 'r')
plt.plot(history['val_accuracy'], color = 'g')
plt.title('Accuracy and Val_Accuracy', size = 15, color = 'orange')
plt.tight_layout()
plt.legend(['Accuracy','Val_Accuracy'])
plt.show()

def prediction(x):
  read = cv2.imread(x)
  color = cv2.cvtColor(read,cv2.COLOR_BGR2RGB)
  size = cv2.resize((cv2.cvtColor(color,cv2.COLOR_RGB2GRAY)),(256,256))
  image = np.array(size)
  res_img = image.reshape(1,256,256,1)
  return res_img

plt.figure(figsize = (8,8))
for i in range(0,16):
  plt.subplot(4,4,i+1)
  j = r.randint(0,len(test_fea))
  change = test_fea[j].reshape(1,256,256,1)
  pre1 = model.predict(change)
  img = change.reshape(256,256)
  # img1 = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB)
  # image = cv2.cvtColor(img1,cv2.COLOR_RGB2BGR)
  def x():
    if np.argmax(pre1)==0:
      return 'Man',round(pre1.max()*100)
    else:
      return  'Woman',round(pre1.max()*100)
  plt.imshow(img)
  plt.axis('off')
  plt.title(x(),size = 10)

model.save('Gender_Detector.h5')

